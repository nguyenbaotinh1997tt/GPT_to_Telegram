import os
import json
import logging
import openai
import nest_asyncio
import re
import requests
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from dotenv import load_dotenv

# =====================[ Load bi·∫øn m√¥i tr∆∞·ªùng ]=====================
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

ALLOWED_USER_IDS = os.getenv("ALLOWED_USER_IDS", "")
ALLOWED_USER_IDS = [int(uid) for uid in ALLOWED_USER_IDS.split(",") if uid.strip().isdigit()]
DEFAULT_SYSTEM_PROMPT = os.getenv("DEFAULT_SYSTEM_PROMPT", "You are ChatGPT, a helpful assistant.")

# =====================[ C·∫•u h√¨nh file & log ]=====================
CONV_FILE = "conversations.json"
RENTAL_FILE = "rental_log.json"
logging.basicConfig(level=logging.INFO)

# =====================[ Load/L∆∞u H·ªôi Tho·∫°i ]=====================
def load_conversations():
    if not os.path.exists(CONV_FILE):
        return {}
    with open(CONV_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_conversations(data):
    with open(CONV_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

conversation_histories = load_conversations()

# =====================[ Load/L∆∞u Thi·∫øt B·ªã Cho Thu√™ ]=====================
def load_rentals():
    if not os.path.exists(RENTAL_FILE):
        return {}
    with open(RENTAL_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_rentals(data):
    with open(RENTAL_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

rental_data = load_rentals()

# =====================[ Command Functions ]=====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω GPT-4 trong nh√≥m.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start - Kh·ªüi ƒë·ªông bot\n"
        "/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n"
        "/reset - Xo√° l·ªãch s·ª≠ h·ªôi tho·∫°i\n"
        "/mentionall - G·ªçi t·∫•t c·∫£ th√†nh vi√™n t∆∞∆°ng t√°c\n"
        "/id - L·∫•y ID ng∆∞·ªùi d√πng v√† nh√≥m\n"
        "/users - Danh s√°ch ng∆∞·ªùi d√πng ƒë√£ t∆∞∆°ng t√°c\n"
        "/forgetme - Xo√° d·ªØ li·ªáu c·ªßa b·∫°n kh·ªèi bot\n"
        "/rent [m√£] [ghi ch√∫] - Ghi thi·∫øt b·ªã cho thu√™\n"
        "/check [m√£] - Ki·ªÉm tra thi·∫øt b·ªã\n"
        "/list - Xem to√†n b·ªô thi·∫øt b·ªã ƒëang cho thu√™"
    )

# =====================[ X·ª≠ l√Ω ·∫£nh g·ª≠i l√™n khi c√≥ nh·∫Øc GPT ]=====================
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caption = update.message.caption or ""
    trigger_words = ["gpt", "bot", "tr·ª£ l√Ω", "chatgpt"]
    lower_caption = caption.lower()
    if not any(word in lower_caption for word in trigger_words):
        return

    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    file_path = file.file_path

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-vision-preview",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "M√¥ t·∫£ n·ªôi dung h√¨nh ·∫£nh n√†y."},
                        {"type": "image_url", "image_url": {"url": file_path}},
                    ]
                }
            ],
            max_tokens=500
        )
        description = response.choices[0].message.content.strip()
        await update.message.reply_text(f"üì∏ {description}")
    except Exception as e:
        logging.error(f"L·ªói GPT ·∫£nh: {e}")
        await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh n√†y.")

# =====================[ MAIN BOT ]=====================
async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    nest_asyncio.apply()

    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
